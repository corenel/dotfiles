# start a non-login shell by default for each new window
set -g default-command 'zsh'

# Makes vim happy
set-option -sg escape-time 10

# set default terminal
set -ga terminal-overrides ',screen-256color:Tc'
set -g default-terminal "screen-256color"
set -as terminal-overrides ',screen*:sitm=\E[3m'

# use reattach-to-user-namespace
if-shell 'test "$(uname)" = "Darwin"' \
  'set-option -g default-command "reattach-to-user-namespace -l $SHELL"'

# Use T as the leader key, not B
unbind C-b
set -g prefix C-t
bind "t" send-prefix

# don't bother me
set-option -g visual-activity off
set-option -g visual-bell off
set-option -g visual-silence off
set-window-option -g monitor-activity off
set-option -g bell-action none

set -g display-panes-time 2000
set -g mouse on

bind C-d detach
bind C-t last-window
bind r source-file "$HOME/.tmux.conf"

# Join pane command - https://unix.stackexchange.com/a/14301/16225
bind "©" command-prompt -p "Join pane from:"  "join-pane -s ':%%'"
bind "ß" command-prompt -p "Send pane to:"  "join-pane -t ':%%'"
bind M-g command-prompt -p "Join pane from:"  "join-pane -s ':%%'"
bind M-s command-prompt -p "Send pane to:"  "join-pane -t ':%%'"

# Vim-like bindings
setw -g mode-keys vi
bind "n" next-window
bind "p" previous-window

# Smart pane switching with awareness of Vim splits.
# See: https://github.com/christoomey/vim-tmux-navigator
is_vim="ps -o state= -o comm= -t '#{pane_tty}' \
    | grep -iqE '^[^TXZ ]+ +(\\S+\\/)?g?(view|n?vim?x?|ssh|mosh?)(diff)?$'"
bind-key -n C-h if-shell "$is_vim" "send-keys C-h"  "select-pane -L"
bind-key -n C-j if-shell "$is_vim" "send-keys C-j"  "select-pane -D"
bind-key -n C-k if-shell "$is_vim" "send-keys C-k"  "select-pane -U"
bind-key -n C-l if-shell "$is_vim" "send-keys C-l"  "select-pane -R"
bind-key -n C-\ if-shell "$is_vim" "send-keys C-\\" "select-pane -l"
bind-key -T copy-mode-vi C-h select-pane -L
bind-key -T copy-mode-vi C-j select-pane -D
bind-key -T copy-mode-vi C-k select-pane -U
bind-key -T copy-mode-vi C-l select-pane -R
bind-key -T copy-mode-vi C-\ select-pane -l
# restoring clearing screen
bind-key C-r send-keys C-l

# fallback for selecting pane
bind-key -r h select-pane -L
bind-key -r j select-pane -D
bind-key -r k select-pane -U
bind-key -r l select-pane -R

# resize pane
bind-key -r C-h resize-pane -L 5
bind-key -r C-j resize-pane -D 5
bind-key -r C-k resize-pane -U 5
bind-key -r C-l resize-pane -R 5

# open new window/pane
bind "c" new-window -c "#{pane_current_path}"
bind "s" split-window -v -c "#{pane_current_path}"
bind "v" split-window -h -c "#{pane_current_path}"
bind-key "S" split-window -v -p 20 -c "#{pane_current_path}"
bind-key "V" split-window -h -p 20 -c "#{pane_current_path}"

# open new window/pane with last ssh session
bind C-s split-window -v "$(ps -ao pid,tty,args | sort | awk '$1 ~ /#{pane_pid}/{VAR=$2} $2 ~ VAR && $3 ~ /ssh/{$1=\"\"; $2=\"\"; print}' | tail -1)"
bind C-v split-window -h "$(ps -ao pid,tty,args | sort | awk '$1 ~ /#{pane_pid}/{VAR=$2} $2 ~ VAR && $3 ~ /ssh/{$1=\"\"; $2=\"\"; print}' | tail -1)"
bind C-c new-window "$(ps -ao pid,tty,args | sort | awk '$1 ~ /#{pane_pid}/{VAR=$2} $2 ~ VAR && $3 ~ /ssh/{$1=\"\"; $2=\"\"; print}' | tail -1)"
# bind "C-s" split-window -v "$(tssh)"
# bind "C-v" split-window -h "$(tssh)"
# bind "C-c" new-window "$(tssh)"

bind "=" select-layout tiled
bind "!" break-pane
bind \; choose-tree

# Screen-like bindings
bind '"' choose-window
bind "A" command-prompt "rename-window '%%'"
bind "Escape" copy-mode

# OSX clipboard fixes - https://gist.github.com/algesten/0ba2d7c19763db6a7396126e8526b65b
# The `reattach-to-user-namespace` command is no longer needed as of tmux-2.6.
unbind-key -T copy-mode-vi M-w
bind-key -T copy-mode-vi v send-keys -X begin-selection
bind-key -T copy-mode-vi V send-keys -X select-line
bind-key -T copy-mode-vi r send-keys -X rectangle-toggle
bind-key -T copy-mode-vi MouseDragEnd1Pane send-keys -X stop-selection
if-shell 'test "$(uname)" = "Darwin"' \
  'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "pbcopy"; \
  bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "pbcopy"'
# if-shell 'test "$(uname)" = "Linux"' \
#   'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"; \
#   bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xclip -in -selection clipboard"'
if-shell 'test "$(uname)" = "Linux"' \
  'bind-key -T copy-mode-vi y send-keys -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i-b"; \
  bind-key -T copy-mode-vi Enter send-keys -X copy-pipe-and-cancel "xsel -i -p && xsel -o -p | xsel -i -b"; \
  bind-key p run "xsel -o | tmux load-buffer - ; tmux paste-buffer"'

# Double clicking selects the word also when not in copy-mode.
bind-key -T root DoubleClick1Pane  select-pane \; copy-mode \; send-keys -X select-word

# Colors - derived from Powerline Double Cyan by Jim Myhrberg
# status line
set -g status-justify centre
set -g status-interval 0
set -g status-fg colour240
set -g status-bg colour233
set -g status-left "#[fg=colour242] #{host} "
set -g status-right "#[fg=colour242]:#{session_name}:#{window_index}.#{pane_index} "
# window status
set -g window-status-format "#[bg=colour233,fg=colour240]  ⋅#I⋅ #W "
set -g window-status-current-format "#[bg=colour233,fg=colour240,nobold] 《#I》#W #[fg=black,bg=colour233,nobold]"
set -g window-status-current-bg colour39
set -g window-status-current-fg colour235
set -g window-status-activity-bg colour245 # fg and bg are flipped here due to
set -g window-status-activity-fg colour233 # a bug in tmux
set -g window-status-separator ""
# pane
set -g pane-border-bg default
set -g pane-border-fg colour238
set -g pane-active-border-bg default
set -g pane-active-border-fg colour39
set -g display-panes-colour colour233
set -g display-panes-active-colour colour245
set -g clock-mode-colour colour39
set -g clock-mode-style 24
# message
set -g message-bg black
set -g message-fg colour39
set -g message-command-bg colour233
set -g message-command-fg black
set -g mode-bg colour39
set -g mode-fg colour232

# # Plugin list
# set -g @plugin 'tmux-plugins/tpm'
# set -g @plugin 'tmux-plugins/tmux-sensible'
# set -g @plugin 'tmux-plugins/tmux-resurrect'
# set -g @plugin 'tmux-plugins/tmux-continuum'
# set -g @plugin 'tmux-plugins/tmux-yank'

# # Plugin settings
# set -g @continuum-restore 'on'
# if-shell 'test "$(uname)" = "Darwin"' 'set -g @continuum-boot-options "iterm,fullscreen"'

# # Initialize TMUX plugin manager (keep this line at the very bottom of tmux.conf)
# # prefix + I: Installs new plugins and Refreshes TMUX environment
# # prefix + U: updates plugin(s)
# # prefix + alt + u: remove/uninstall plugins not on the plugin list
# run '$HOME/.tmux/plugins/tpm/tpm'
